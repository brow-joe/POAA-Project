buildscript {
	ext {
		jooqVersion = "3.10.0"
		jdbcUrl = "jdbc:postgresql://localhost:5432/lamenteesmaravillosa"
		jdbcUser = "postgres"
		jdbcPassword = "postgres"
		kotlinVersion = "1.2.10"
		springBootVersion = "1.5.9.RELEASE"
	}
	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "gradle.plugin.com.boxfuse.client:flyway-release:5.0.2"
		classpath "org.jooq:jooq-codegen:${jooqVersion}"
		classpath "org.postgresql:postgresql:42.1.4"
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
	}
}

apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.flywaydb.flyway"
apply plugin: "org.springframework.boot"
apply plugin: "war"

group = "br.com.browjoe"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = 1.8
targetCompatibility = 1.8

bootRepackage {
	mainClass = "br.com.browjoe.ApplicationStartUpKt"
}

bootRun {
	addResources = true
}

jar {
	baseName = "poaa-back-end"
	version = "0.0.1-SNAPSHOT"
}

repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

sourceSets {
	main.java.srcDirs += "src/main/java"
	test.java.srcDirs += "src/test/java"
	main.kotlin.srcDirs += "src/main/kotlin"
	test.kotlin.srcDirs += "src/test/kotlin"
}

ext {
	springCloudVersion = "Dalston.SR4"
}

dependencies {
	compile "org.jooq:jooq:${jooqVersion}"
	compile "org.jooq:jooq-meta:${jooqVersion}"
	compile "org.jooq:jooq-codegen:${jooqVersion}"
	
	compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
	compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
	testCompile "org.jetbrains.kotlin:kotlin-test-junit:${kotlinVersion}"
	
	compile ("org.springframework.boot:spring-boot-starter-web") {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
	}
	compile "org.springframework.boot:spring-boot-starter-undertow"
	providedRuntime "org.springframework.boot:spring-boot-starter-tomcat"
	compile "org.springframework.boot:spring-boot-starter-jersey"
	compile "org.springframework.boot:spring-boot-starter-hateoas"
	compile "org.springframework.boot:spring-boot-starter-jooq"
	compile "org.postgresql:postgresql"
	
	compile "org.springframework.boot:spring-boot-starter-log4j2"
	runtime "org.springframework.boot:spring-boot-devtools"
	
	testCompile "org.springframework.boot:spring-boot-starter-test"
	testCompile "junit:junit"
}

configurations.all {
	exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

flyway {
	url = "${jdbcUrl}"
	user = "${jdbcUser}"
	password = "${jdbcPassword}"
}

task jooqGenerate {
	def writer = new StringWriter()
	def xml = new groovy.xml.MarkupBuilder(writer)
	.configuration("xmlns": "http://www.jooq.org/xsd/jooq-codegen-3.10.0.xsd") {
		jdbc() {
			driver("org.postgresql.Driver")
			url("${jdbcUrl}")
			user("${jdbcUser}")
			password("${jdbcPassword}")
		}
		generator() {
			database() {
				name("org.jooq.util.postgres.PostgresDatabase")
				inputSchema("public")
				includes(".*")
			}
			generate([:]) {
				records true
			}
			target() {
				packageName("br.com.browjoe.jooq.data")
				directory("src/main/java")
			}
		}
	}
	org.jooq.util.GenerationTool.generate (
		javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
	)
}